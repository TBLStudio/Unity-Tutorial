using UnityEngine;using System.Collections;using System.Xml.Serialization;using UnityEngine.SceneManagement;using UnityEngine.UI;public class GameManager : MonoBehaviour {    public static GameManager instance;    private BallCreator ballCreator;    private int index = 0;    private int balls = 10;    private float volume = 1.0f;    private AudioSource mainAudio;    [SerializeField]    private AudioClip rim_hit1, rim_hit2, bounce1, bounce2, net_sound;	// Use this for initialization	void Awake () {        MakeSingleton();        mainAudio = GetComponent<AudioSource>();        ballCreator = GetComponent<BallCreator>();		}    void MakeSingleton ()    {        if (instance == null)        {            instance = this;            DontDestroyOnLoad(gameObject);        }        else        {            Destroy(gameObject);        }    }	    public void SetBallIndex (int index)    {        this.index = index;    }    public void CreateBall ()    {        ballCreator.CreateBall(index);    }    void OnLevelWasLoaded ()    {        if (SceneManager.GetActiveScene().name == "GamePlay")        {            CreateBall();            GameObject.Find("Balls Text").GetComponent<Text>().text = "Balls: "+ balls;        }    }    public void IncrementBalls (int increment)    {        balls += increment;        if (balls > 10)            balls = 10;        GameObject.Find("Balls Text").GetComponent<Text>().text = "Balls: "+ balls;    }    public void DecrementBalls ()    {        balls--;        GameObject.Find("Balls Text").GetComponent<Text>().text = "Balls: "+ balls;    }    public void PlaySource (int id)    {        switch (id)        {            case 1:                mainAudio.PlayOneShot(net_sound, volume);                break;            case 2:                if (Random.Range(0, 2) > 1)                {                    mainAudio.PlayOneShot(rim_hit1, volume);                }                else                {                    mainAudio.PlayOneShot(rim_hit2, volume);                }                break;            case 3:                if (Random.Range(0, 2) > 1)                {                    mainAudio.PlayOneShot(bounce1, volume);                }                else                {                    mainAudio.PlayOneShot(bounce2, volume);                }                break;            case 4:                if (Random.Range(0, 2) > 1)                {                    mainAudio.PlayOneShot(bounce1, volume/2);                }                else                {                    mainAudio.PlayOneShot(bounce2, volume/2);                }                break;            case 5:                if (Random.Range(0, 2) > 1)                {                    mainAudio.PlayOneShot(rim_hit1, volume/2);                }                else                {                    mainAudio.PlayOneShot(rim_hit2, volume/2);                }                                break;        }    }}