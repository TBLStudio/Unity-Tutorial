using UnityEngine;using System.Collections;using UnityEngine.SceneManagement;public class GameManager : MonoBehaviour {    public static GameManager instance;    private GameObject[] puzzlePieces;    private Sprite[] puzzleImages;    private PuzzlePiece[,] Maxtrix = new PuzzlePiece[GameVariables.MaxRows, GameVariables.MaxColumns];    private Vector3 screenPositionToAnimate;    private PuzzlePiece pieceToAnimate;    private int toAnimateRow, toAnimateColumn;    private float animSpeed = 10f;    private int puzzleIndex;    private GameState gameState;	// Use this for initialization	void Awake () {        MakeSingleton();	}		// Update is called once per frame	void Update () {		}    void Start ()    {        puzzleIndex = -1;    }    void MakeSingleton ()    {        if (instance == null)        {            instance = this;            DontDestroyOnLoad(gameObject);        }        else        {            Destroy(gameObject);        }    }    public void setIndex (int puzzleIndex)    {        this.puzzleIndex = puzzleIndex;    }    void LoadPuzzle ()    {        puzzleImages = Resources.LoadAll<Sprite>("Sprites/BG " + puzzleIndex);        puzzlePieces = GameObject.Find("Puzzle Holder").GetComponent<PuzzleHolder>().puzzlePieces;        for (int i = 0; i < puzzlePieces.Length; i++)        {            puzzlePieces[i].GetComponent<SpriteRenderer>().sprite = puzzleImages[i];        }    }    void OnLevelWasLoaded ()    {        print("OnLevelWasLoaded");        if (SceneManager.GetActiveScene().name == "GamePlay")        {            print("puzzleIndex ="+ puzzleIndex);            if (puzzleIndex > 0)            {                print("LoadPuzzle");                LoadPuzzle();                GameStated();            }        }    }            void GameStated ()    {        int index = Random.Range(0, GameVariables.MaxSize);        puzzlePieces[index].SetActive(false);        for (int row = 0; row < GameVariables.MaxRows; row++)        {            for (int column = 0; column < GameVariables.MaxColumns; column++)            {                if (puzzlePieces[row * GameVariables.MaxColumns + column].activeInHierarchy)                {                    Vector3 point = GetScreenCoordinatesFromViewPort(row, column);                    puzzlePieces[row * GameVariables.MaxColumns + column].transform.position = point;                    Maxtrix[row, column] = new PuzzlePiece();                    Maxtrix[row, column].gameObject = puzzlePieces[row * GameVariables.MaxColumns + column];                    Maxtrix[row, column].originalRow = row;                    Maxtrix[row, column].originalColumn = column;                }                else                {                    Maxtrix[row, column] = null;                }            }        }    }    private Vector3 GetScreenCoordinatesFromViewPort (int row, int column)    {        Vector3 point = Camera.main.ViewportToWorldPoint(new Vector3(0.225f * row, 1 - 0.235f * column, 0));        point.z = 0;        return point;    }} // Game Manager